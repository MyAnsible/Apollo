- name: install wait script
  when: marathon_enabled | bool
  sudo: yes
  template:
    src: marathon-wait-for-listen.sh.j2
    dest: /usr/local/bin/marathon-wait-for-listen.sh
    mode: 0755
  tags:
    - marathon

- name: create marathon artifact store directory
  when: marathon_artifact_store_dir is defined and marathon_enabled | bool
  file:
    path: "{{ marathon_artifact_store_dir }}"
    state: directory
    mode: 0755
  sudo: yes
  tags:
    - marathon

- name: download .dockercfg from infrastructure bucket
  local_action:
    module: s3
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
    bucket: "{{ s3_infrastructure_bucket_private }}"
    object: /etc/marathon/.dockercfg
    dest: /tmp/.dockercfg
    mode: get
  tags:
    - marathon

- name: upload .dockercfg to cluster bucket
  local_action:
    module: s3
    aws_access_key: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
    aws_secret_key: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
    bucket: "udacity-{{ mesos_cluster_name }}"
    object: .dockercfg
    src: /tmp/.dockercfg
    mode: put
  tags:
    - marathon

# NOTE: This is for backwards compatibility with existing conductor.json files referencing the artifact store
- name: create marathon artifact folder
  file:
    path: "{{ marathon_artifact_store_dir }}/etc"
    state: directory
    mode: 0755
    recurse: yes
  tags:
    - marathon
- name: upload .dockercfg to artifacts dir
  copy:
    src: /tmp/.dockercfg
    dest: "{{ marathon_artifact_store_dir }}/etc/.dockercfg"
    mode: 0644
    force: yes
  sudo: yes
  tags:
    - marathon

- name: destroy old marathon container
  when: marathon_rebuild_container
  docker:
    name: marathon
    image: "{{ marathon_image }}"
    state: absent

- name: run marathon container
  when: marathon_enabled|bool
  # NOTE: Using command until we update to Ansible 2.0 which supports --log-driver
  shell: >
    docker run -d
    --name=marathon
    --net={{ marathon_net }}
    --restart={{ marathon_restart_policy }}
    --log-driver=syslog
    --log-opt syslog-tag=marathon
    -p 0.0.0.0:{{ marathon_port }}:{{ marathon_port }}/tcp
    --expose {{ marathon_port }}
    --memory {{ marathon_container_memory_limit }}
    -v {{ marathon_artifact_store_dir }}:/store
    -e JAVA_OPTS="{{ marathon_java_settings }}"
    -e SERVICE_IGNORE=yes
    -e LOGSPOUT=ignore
    {{marathon_image}}
    {{marathon_command}}
  register: command_result
  failed_when: "'The name \"marathon\" is already in use' not in command_result.stderr and command_result.rc != 0"
  notify:
    - wait for marathon to listen

- name: upload marathon template service
  when: marathon_enabled | bool
  template:
    src: marathon.conf.j2
    dest: /etc/init/marathon.conf
    mode: 0755
  sudo: yes
  tags:
    - marathon

# Attach to the running container, or start it if needed
# and forward all signals so that the process manager can detect
# when a container stops and correctly restart it.
- name: ensure marathon is running (and enable it at boot)
  when: marathon_enabled | bool
  sudo: yes
  service:
    name: marathon
    state: started
    enabled: yes
  tags:
    - marathon

- name: Set marathon consul service definition
  when: marathon_enabled | bool
  sudo: yes
  template:
    src: marathon-consul.j2
    dest: "{{ marathon_consul_dir }}/marathon.json"
  notify:
    - restart consul

# tasks for stoping docker marathon
- name: stop marathon container
  when: not marathon_enabled | bool
  service:
    name: marathon
    state: stopped
    enabled: no
  tags:
    - marathon
